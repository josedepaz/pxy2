{"version":3,"sources":["pxy2/tests/app.jshint.js","pxy2/tests/electron.js","pxy2/tests/electron.jshint.js","pxy2/tests/helpers/destroy-app.js","pxy2/tests/helpers/destroy-app.jshint.js","pxy2/tests/helpers/module-for-acceptance.js","pxy2/tests/helpers/module-for-acceptance.jshint.js","pxy2/tests/helpers/resolver.js","pxy2/tests/helpers/resolver.jshint.js","pxy2/tests/helpers/start-app.js","pxy2/tests/helpers/start-app.jshint.js","pxy2/tests/resolver.jshint.js","pxy2/tests/router.jshint.js","pxy2/tests/routes/help.jshint.js","pxy2/tests/test-helper.js","pxy2/tests/test-helper.jshint.js","pxy2/tests/unit/routes/help-test.js","pxy2/tests/unit/routes/help-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('pxy2/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('pxy2/tests/electron', ['exports'], function (exports) {\n    /* jshint undef: false */\n\n    var _require = require('electron');\n\n    var BrowserWindow = _require.BrowserWindow;\n    var app = _require.app;\n\n    var mainWindow = null;\n\n    app.on('window-all-closed', function onWindowAllClosed() {\n        if (process.platform !== 'darwin') {\n            app.quit();\n        }\n    });\n\n    app.on('ready', function onReady() {\n        mainWindow = new BrowserWindow({\n            width: 800,\n            height: 600\n        });\n\n        delete mainWindow.module;\n\n        if (process.env.EMBER_ENV === 'test') {\n            mainWindow.loadURL('file://' + __dirname + '/index.html');\n        } else {\n            mainWindow.loadURL('file://' + __dirname + '/dist/index.html');\n        }\n\n        mainWindow.on('closed', function onClosed() {\n            mainWindow = null;\n        });\n    });\n\n    /* jshint undef: true */\n});","define('pxy2/tests/electron.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | electron.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'electron.js should pass jshint.');\n  });\n});","define('pxy2/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('pxy2/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('pxy2/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'pxy2/tests/helpers/start-app', 'pxy2/tests/helpers/destroy-app'], function (exports, _qunit, _pxy2TestsHelpersStartApp, _pxy2TestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _pxy2TestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _pxy2TestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('pxy2/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('pxy2/tests/helpers/resolver', ['exports', 'pxy2/resolver', 'pxy2/config/environment'], function (exports, _pxy2Resolver, _pxy2ConfigEnvironment) {\n\n  var resolver = _pxy2Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _pxy2ConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _pxy2ConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('pxy2/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('pxy2/tests/helpers/start-app', ['exports', 'ember', 'pxy2/app', 'pxy2/config/environment'], function (exports, _ember, _pxy2App, _pxy2ConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _pxy2ConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _pxy2App['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('pxy2/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('pxy2/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('pxy2/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 9, col 34, Missing semicolon.\\n\\n1 error');\n  });\n});","define('pxy2/tests/routes/help.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/help.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/help.js should pass jshint.');\n  });\n});","define('pxy2/tests/test-helper', ['exports', 'pxy2/tests/helpers/resolver', 'ember-qunit'], function (exports, _pxy2TestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_pxy2TestsHelpersResolver['default']);\n});","define('pxy2/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('pxy2/tests/unit/routes/help-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:help', 'Unit | Route | help', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pxy2/tests/unit/routes/help-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/help-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/help-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('pxy2/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}